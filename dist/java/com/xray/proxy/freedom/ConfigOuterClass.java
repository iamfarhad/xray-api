// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proxy/freedom/config.proto

package com.xray.proxy.freedom;

public final class ConfigOuterClass {
  private ConfigOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_xray_proxy_freedom_DestinationOverride_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_xray_proxy_freedom_DestinationOverride_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_xray_proxy_freedom_Fragment_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_xray_proxy_freedom_Fragment_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_xray_proxy_freedom_Noise_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_xray_proxy_freedom_Noise_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_xray_proxy_freedom_Config_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_xray_proxy_freedom_Config_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\032proxy/freedom/config.proto\022\022xray.proxy" +
      ".freedom\032!common/protocol/server_spec.pr" +
      "oto\"K\n\023DestinationOverride\0224\n\006server\030\001 \001" +
      "(\0132$.xray.common.protocol.ServerEndpoint" +
      "\"\210\001\n\010Fragment\022\024\n\014packets_from\030\001 \001(\004\022\022\n\np" +
      "ackets_to\030\002 \001(\004\022\022\n\nlength_min\030\003 \001(\004\022\022\n\nl" +
      "ength_max\030\004 \001(\004\022\024\n\014interval_min\030\005 \001(\004\022\024\n" +
      "\014interval_max\030\006 \001(\004\"h\n\005Noise\022\022\n\nlength_m" +
      "in\030\001 \001(\004\022\022\n\nlength_max\030\002 \001(\004\022\021\n\tdelay_mi" +
      "n\030\003 \001(\004\022\021\n\tdelay_max\030\004 \001(\004\022\021\n\tstr_noise\030" +
      "\005 \001(\t\"\332\003\n\006Config\022B\n\017domain_strategy\030\001 \001(" +
      "\0162).xray.proxy.freedom.Config.DomainStra" +
      "tegy\022\023\n\007timeout\030\002 \001(\rB\002\030\001\022E\n\024destination" +
      "_override\030\003 \001(\0132\'.xray.proxy.freedom.Des" +
      "tinationOverride\022\022\n\nuser_level\030\004 \001(\r\022.\n\010" +
      "fragment\030\005 \001(\0132\034.xray.proxy.freedom.Frag" +
      "ment\022\026\n\016proxy_protocol\030\006 \001(\r\022(\n\005noise\030\007 " +
      "\001(\0132\031.xray.proxy.freedom.Noise\"\251\001\n\016Domai" +
      "nStrategy\022\t\n\005AS_IS\020\000\022\n\n\006USE_IP\020\001\022\013\n\007USE_" +
      "IP4\020\002\022\013\n\007USE_IP6\020\003\022\014\n\010USE_IP46\020\004\022\014\n\010USE_" +
      "IP64\020\005\022\014\n\010FORCE_IP\020\006\022\r\n\tFORCE_IP4\020\007\022\r\n\tF" +
      "ORCE_IP6\020\010\022\016\n\nFORCE_IP46\020\t\022\016\n\nFORCE_IP64" +
      "\020\nBX\n\026com.xray.proxy.freedomP\001Z\'github.c" +
      "om/xtls/xray-core/proxy/freedom\252\002\022Xray.P" +
      "roxy.Freedomb\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.xray.common.protocol.ServerSpec.getDescriptor(),
        });
    internal_static_xray_proxy_freedom_DestinationOverride_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_xray_proxy_freedom_DestinationOverride_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_xray_proxy_freedom_DestinationOverride_descriptor,
        new java.lang.String[] { "Server", });
    internal_static_xray_proxy_freedom_Fragment_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_xray_proxy_freedom_Fragment_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_xray_proxy_freedom_Fragment_descriptor,
        new java.lang.String[] { "PacketsFrom", "PacketsTo", "LengthMin", "LengthMax", "IntervalMin", "IntervalMax", });
    internal_static_xray_proxy_freedom_Noise_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_xray_proxy_freedom_Noise_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_xray_proxy_freedom_Noise_descriptor,
        new java.lang.String[] { "LengthMin", "LengthMax", "DelayMin", "DelayMax", "StrNoise", });
    internal_static_xray_proxy_freedom_Config_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_xray_proxy_freedom_Config_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_xray_proxy_freedom_Config_descriptor,
        new java.lang.String[] { "DomainStrategy", "Timeout", "DestinationOverride", "UserLevel", "Fragment", "ProxyProtocol", "Noise", });
    com.xray.common.protocol.ServerSpec.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
