// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport/internet/splithttp/config.proto

package com.xray.transport.internet.splithttp;

/**
 * Protobuf type {@code xray.transport.internet.splithttp.Config}
 */
public final class Config extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:xray.transport.internet.splithttp.Config)
    ConfigOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Config.newBuilder() to construct.
  private Config(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Config() {
    host_ = "";
    path_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new Config();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private Config(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();

            host_ = s;
            break;
          }
          case 18: {
            java.lang.String s = input.readStringRequireUtf8();

            path_ = s;
            break;
          }
          case 26: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              header_ = com.google.protobuf.MapField.newMapField(
                  HeaderDefaultEntryHolder.defaultEntry);
              mutable_bitField0_ |= 0x00000001;
            }
            com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
            header__ = input.readMessage(
                HeaderDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
            header_.getMutableMap().put(
                header__.getKey(), header__.getValue());
            break;
          }
          case 34: {
            com.xray.transport.internet.splithttp.RandRangeConfig.Builder subBuilder = null;
            if (scMaxConcurrentPosts_ != null) {
              subBuilder = scMaxConcurrentPosts_.toBuilder();
            }
            scMaxConcurrentPosts_ = input.readMessage(com.xray.transport.internet.splithttp.RandRangeConfig.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(scMaxConcurrentPosts_);
              scMaxConcurrentPosts_ = subBuilder.buildPartial();
            }

            break;
          }
          case 42: {
            com.xray.transport.internet.splithttp.RandRangeConfig.Builder subBuilder = null;
            if (scMaxEachPostBytes_ != null) {
              subBuilder = scMaxEachPostBytes_.toBuilder();
            }
            scMaxEachPostBytes_ = input.readMessage(com.xray.transport.internet.splithttp.RandRangeConfig.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(scMaxEachPostBytes_);
              scMaxEachPostBytes_ = subBuilder.buildPartial();
            }

            break;
          }
          case 50: {
            com.xray.transport.internet.splithttp.RandRangeConfig.Builder subBuilder = null;
            if (scMinPostsIntervalMs_ != null) {
              subBuilder = scMinPostsIntervalMs_.toBuilder();
            }
            scMinPostsIntervalMs_ = input.readMessage(com.xray.transport.internet.splithttp.RandRangeConfig.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(scMinPostsIntervalMs_);
              scMinPostsIntervalMs_ = subBuilder.buildPartial();
            }

            break;
          }
          case 56: {

            noSSEHeader_ = input.readBool();
            break;
          }
          case 66: {
            com.xray.transport.internet.splithttp.RandRangeConfig.Builder subBuilder = null;
            if (xPaddingBytes_ != null) {
              subBuilder = xPaddingBytes_.toBuilder();
            }
            xPaddingBytes_ = input.readMessage(com.xray.transport.internet.splithttp.RandRangeConfig.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(xPaddingBytes_);
              xPaddingBytes_ = subBuilder.buildPartial();
            }

            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.xray.transport.internet.splithttp.ConfigOuterClass.internal_static_xray_transport_internet_splithttp_Config_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  @java.lang.Override
  protected com.google.protobuf.MapField internalGetMapField(
      int number) {
    switch (number) {
      case 3:
        return internalGetHeader();
      default:
        throw new RuntimeException(
            "Invalid map field number: " + number);
    }
  }
  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.xray.transport.internet.splithttp.ConfigOuterClass.internal_static_xray_transport_internet_splithttp_Config_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.xray.transport.internet.splithttp.Config.class, com.xray.transport.internet.splithttp.Config.Builder.class);
  }

  public static final int HOST_FIELD_NUMBER = 1;
  private volatile java.lang.Object host_;
  /**
   * <code>string host = 1;</code>
   * @return The host.
   */
  @java.lang.Override
  public java.lang.String getHost() {
    java.lang.Object ref = host_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      host_ = s;
      return s;
    }
  }
  /**
   * <code>string host = 1;</code>
   * @return The bytes for host.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getHostBytes() {
    java.lang.Object ref = host_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      host_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int PATH_FIELD_NUMBER = 2;
  private volatile java.lang.Object path_;
  /**
   * <code>string path = 2;</code>
   * @return The path.
   */
  @java.lang.Override
  public java.lang.String getPath() {
    java.lang.Object ref = path_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      path_ = s;
      return s;
    }
  }
  /**
   * <code>string path = 2;</code>
   * @return The bytes for path.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getPathBytes() {
    java.lang.Object ref = path_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      path_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int HEADER_FIELD_NUMBER = 3;
  private static final class HeaderDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.String, java.lang.String> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.String, java.lang.String>newDefaultInstance(
                com.xray.transport.internet.splithttp.ConfigOuterClass.internal_static_xray_transport_internet_splithttp_Config_HeaderEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.STRING,
                "");
  }
  private com.google.protobuf.MapField<
      java.lang.String, java.lang.String> header_;
  private com.google.protobuf.MapField<java.lang.String, java.lang.String>
  internalGetHeader() {
    if (header_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          HeaderDefaultEntryHolder.defaultEntry);
    }
    return header_;
  }

  public int getHeaderCount() {
    return internalGetHeader().getMap().size();
  }
  /**
   * <code>map&lt;string, string&gt; header = 3;</code>
   */

  @java.lang.Override
  public boolean containsHeader(
      java.lang.String key) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    return internalGetHeader().getMap().containsKey(key);
  }
  /**
   * Use {@link #getHeaderMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, java.lang.String> getHeader() {
    return getHeaderMap();
  }
  /**
   * <code>map&lt;string, string&gt; header = 3;</code>
   */
  @java.lang.Override

  public java.util.Map<java.lang.String, java.lang.String> getHeaderMap() {
    return internalGetHeader().getMap();
  }
  /**
   * <code>map&lt;string, string&gt; header = 3;</code>
   */
  @java.lang.Override

  public java.lang.String getHeaderOrDefault(
      java.lang.String key,
      java.lang.String defaultValue) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    java.util.Map<java.lang.String, java.lang.String> map =
        internalGetHeader().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <code>map&lt;string, string&gt; header = 3;</code>
   */
  @java.lang.Override

  public java.lang.String getHeaderOrThrow(
      java.lang.String key) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    java.util.Map<java.lang.String, java.lang.String> map =
        internalGetHeader().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int SCMAXCONCURRENTPOSTS_FIELD_NUMBER = 4;
  private com.xray.transport.internet.splithttp.RandRangeConfig scMaxConcurrentPosts_;
  /**
   * <code>.xray.transport.internet.splithttp.RandRangeConfig scMaxConcurrentPosts = 4;</code>
   * @return Whether the scMaxConcurrentPosts field is set.
   */
  @java.lang.Override
  public boolean hasScMaxConcurrentPosts() {
    return scMaxConcurrentPosts_ != null;
  }
  /**
   * <code>.xray.transport.internet.splithttp.RandRangeConfig scMaxConcurrentPosts = 4;</code>
   * @return The scMaxConcurrentPosts.
   */
  @java.lang.Override
  public com.xray.transport.internet.splithttp.RandRangeConfig getScMaxConcurrentPosts() {
    return scMaxConcurrentPosts_ == null ? com.xray.transport.internet.splithttp.RandRangeConfig.getDefaultInstance() : scMaxConcurrentPosts_;
  }
  /**
   * <code>.xray.transport.internet.splithttp.RandRangeConfig scMaxConcurrentPosts = 4;</code>
   */
  @java.lang.Override
  public com.xray.transport.internet.splithttp.RandRangeConfigOrBuilder getScMaxConcurrentPostsOrBuilder() {
    return getScMaxConcurrentPosts();
  }

  public static final int SCMAXEACHPOSTBYTES_FIELD_NUMBER = 5;
  private com.xray.transport.internet.splithttp.RandRangeConfig scMaxEachPostBytes_;
  /**
   * <code>.xray.transport.internet.splithttp.RandRangeConfig scMaxEachPostBytes = 5;</code>
   * @return Whether the scMaxEachPostBytes field is set.
   */
  @java.lang.Override
  public boolean hasScMaxEachPostBytes() {
    return scMaxEachPostBytes_ != null;
  }
  /**
   * <code>.xray.transport.internet.splithttp.RandRangeConfig scMaxEachPostBytes = 5;</code>
   * @return The scMaxEachPostBytes.
   */
  @java.lang.Override
  public com.xray.transport.internet.splithttp.RandRangeConfig getScMaxEachPostBytes() {
    return scMaxEachPostBytes_ == null ? com.xray.transport.internet.splithttp.RandRangeConfig.getDefaultInstance() : scMaxEachPostBytes_;
  }
  /**
   * <code>.xray.transport.internet.splithttp.RandRangeConfig scMaxEachPostBytes = 5;</code>
   */
  @java.lang.Override
  public com.xray.transport.internet.splithttp.RandRangeConfigOrBuilder getScMaxEachPostBytesOrBuilder() {
    return getScMaxEachPostBytes();
  }

  public static final int SCMINPOSTSINTERVALMS_FIELD_NUMBER = 6;
  private com.xray.transport.internet.splithttp.RandRangeConfig scMinPostsIntervalMs_;
  /**
   * <code>.xray.transport.internet.splithttp.RandRangeConfig scMinPostsIntervalMs = 6;</code>
   * @return Whether the scMinPostsIntervalMs field is set.
   */
  @java.lang.Override
  public boolean hasScMinPostsIntervalMs() {
    return scMinPostsIntervalMs_ != null;
  }
  /**
   * <code>.xray.transport.internet.splithttp.RandRangeConfig scMinPostsIntervalMs = 6;</code>
   * @return The scMinPostsIntervalMs.
   */
  @java.lang.Override
  public com.xray.transport.internet.splithttp.RandRangeConfig getScMinPostsIntervalMs() {
    return scMinPostsIntervalMs_ == null ? com.xray.transport.internet.splithttp.RandRangeConfig.getDefaultInstance() : scMinPostsIntervalMs_;
  }
  /**
   * <code>.xray.transport.internet.splithttp.RandRangeConfig scMinPostsIntervalMs = 6;</code>
   */
  @java.lang.Override
  public com.xray.transport.internet.splithttp.RandRangeConfigOrBuilder getScMinPostsIntervalMsOrBuilder() {
    return getScMinPostsIntervalMs();
  }

  public static final int NOSSEHEADER_FIELD_NUMBER = 7;
  private boolean noSSEHeader_;
  /**
   * <code>bool noSSEHeader = 7;</code>
   * @return The noSSEHeader.
   */
  @java.lang.Override
  public boolean getNoSSEHeader() {
    return noSSEHeader_;
  }

  public static final int XPADDINGBYTES_FIELD_NUMBER = 8;
  private com.xray.transport.internet.splithttp.RandRangeConfig xPaddingBytes_;
  /**
   * <code>.xray.transport.internet.splithttp.RandRangeConfig xPaddingBytes = 8;</code>
   * @return Whether the xPaddingBytes field is set.
   */
  @java.lang.Override
  public boolean hasXPaddingBytes() {
    return xPaddingBytes_ != null;
  }
  /**
   * <code>.xray.transport.internet.splithttp.RandRangeConfig xPaddingBytes = 8;</code>
   * @return The xPaddingBytes.
   */
  @java.lang.Override
  public com.xray.transport.internet.splithttp.RandRangeConfig getXPaddingBytes() {
    return xPaddingBytes_ == null ? com.xray.transport.internet.splithttp.RandRangeConfig.getDefaultInstance() : xPaddingBytes_;
  }
  /**
   * <code>.xray.transport.internet.splithttp.RandRangeConfig xPaddingBytes = 8;</code>
   */
  @java.lang.Override
  public com.xray.transport.internet.splithttp.RandRangeConfigOrBuilder getXPaddingBytesOrBuilder() {
    return getXPaddingBytes();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!getHostBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, host_);
    }
    if (!getPathBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, path_);
    }
    com.google.protobuf.GeneratedMessageV3
      .serializeStringMapTo(
        output,
        internalGetHeader(),
        HeaderDefaultEntryHolder.defaultEntry,
        3);
    if (scMaxConcurrentPosts_ != null) {
      output.writeMessage(4, getScMaxConcurrentPosts());
    }
    if (scMaxEachPostBytes_ != null) {
      output.writeMessage(5, getScMaxEachPostBytes());
    }
    if (scMinPostsIntervalMs_ != null) {
      output.writeMessage(6, getScMinPostsIntervalMs());
    }
    if (noSSEHeader_ != false) {
      output.writeBool(7, noSSEHeader_);
    }
    if (xPaddingBytes_ != null) {
      output.writeMessage(8, getXPaddingBytes());
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!getHostBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, host_);
    }
    if (!getPathBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, path_);
    }
    for (java.util.Map.Entry<java.lang.String, java.lang.String> entry
         : internalGetHeader().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
      header__ = HeaderDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, header__);
    }
    if (scMaxConcurrentPosts_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, getScMaxConcurrentPosts());
    }
    if (scMaxEachPostBytes_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, getScMaxEachPostBytes());
    }
    if (scMinPostsIntervalMs_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, getScMinPostsIntervalMs());
    }
    if (noSSEHeader_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(7, noSSEHeader_);
    }
    if (xPaddingBytes_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(8, getXPaddingBytes());
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.xray.transport.internet.splithttp.Config)) {
      return super.equals(obj);
    }
    com.xray.transport.internet.splithttp.Config other = (com.xray.transport.internet.splithttp.Config) obj;

    if (!getHost()
        .equals(other.getHost())) return false;
    if (!getPath()
        .equals(other.getPath())) return false;
    if (!internalGetHeader().equals(
        other.internalGetHeader())) return false;
    if (hasScMaxConcurrentPosts() != other.hasScMaxConcurrentPosts()) return false;
    if (hasScMaxConcurrentPosts()) {
      if (!getScMaxConcurrentPosts()
          .equals(other.getScMaxConcurrentPosts())) return false;
    }
    if (hasScMaxEachPostBytes() != other.hasScMaxEachPostBytes()) return false;
    if (hasScMaxEachPostBytes()) {
      if (!getScMaxEachPostBytes()
          .equals(other.getScMaxEachPostBytes())) return false;
    }
    if (hasScMinPostsIntervalMs() != other.hasScMinPostsIntervalMs()) return false;
    if (hasScMinPostsIntervalMs()) {
      if (!getScMinPostsIntervalMs()
          .equals(other.getScMinPostsIntervalMs())) return false;
    }
    if (getNoSSEHeader()
        != other.getNoSSEHeader()) return false;
    if (hasXPaddingBytes() != other.hasXPaddingBytes()) return false;
    if (hasXPaddingBytes()) {
      if (!getXPaddingBytes()
          .equals(other.getXPaddingBytes())) return false;
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + HOST_FIELD_NUMBER;
    hash = (53 * hash) + getHost().hashCode();
    hash = (37 * hash) + PATH_FIELD_NUMBER;
    hash = (53 * hash) + getPath().hashCode();
    if (!internalGetHeader().getMap().isEmpty()) {
      hash = (37 * hash) + HEADER_FIELD_NUMBER;
      hash = (53 * hash) + internalGetHeader().hashCode();
    }
    if (hasScMaxConcurrentPosts()) {
      hash = (37 * hash) + SCMAXCONCURRENTPOSTS_FIELD_NUMBER;
      hash = (53 * hash) + getScMaxConcurrentPosts().hashCode();
    }
    if (hasScMaxEachPostBytes()) {
      hash = (37 * hash) + SCMAXEACHPOSTBYTES_FIELD_NUMBER;
      hash = (53 * hash) + getScMaxEachPostBytes().hashCode();
    }
    if (hasScMinPostsIntervalMs()) {
      hash = (37 * hash) + SCMINPOSTSINTERVALMS_FIELD_NUMBER;
      hash = (53 * hash) + getScMinPostsIntervalMs().hashCode();
    }
    hash = (37 * hash) + NOSSEHEADER_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getNoSSEHeader());
    if (hasXPaddingBytes()) {
      hash = (37 * hash) + XPADDINGBYTES_FIELD_NUMBER;
      hash = (53 * hash) + getXPaddingBytes().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.xray.transport.internet.splithttp.Config parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.xray.transport.internet.splithttp.Config parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.xray.transport.internet.splithttp.Config parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.xray.transport.internet.splithttp.Config parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.xray.transport.internet.splithttp.Config parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.xray.transport.internet.splithttp.Config parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.xray.transport.internet.splithttp.Config parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.xray.transport.internet.splithttp.Config parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.xray.transport.internet.splithttp.Config parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.xray.transport.internet.splithttp.Config parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.xray.transport.internet.splithttp.Config parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.xray.transport.internet.splithttp.Config parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.xray.transport.internet.splithttp.Config prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code xray.transport.internet.splithttp.Config}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:xray.transport.internet.splithttp.Config)
      com.xray.transport.internet.splithttp.ConfigOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.xray.transport.internet.splithttp.ConfigOuterClass.internal_static_xray_transport_internet_splithttp_Config_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 3:
          return internalGetHeader();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMutableMapField(
        int number) {
      switch (number) {
        case 3:
          return internalGetMutableHeader();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.xray.transport.internet.splithttp.ConfigOuterClass.internal_static_xray_transport_internet_splithttp_Config_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.xray.transport.internet.splithttp.Config.class, com.xray.transport.internet.splithttp.Config.Builder.class);
    }

    // Construct using com.xray.transport.internet.splithttp.Config.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      host_ = "";

      path_ = "";

      internalGetMutableHeader().clear();
      if (scMaxConcurrentPostsBuilder_ == null) {
        scMaxConcurrentPosts_ = null;
      } else {
        scMaxConcurrentPosts_ = null;
        scMaxConcurrentPostsBuilder_ = null;
      }
      if (scMaxEachPostBytesBuilder_ == null) {
        scMaxEachPostBytes_ = null;
      } else {
        scMaxEachPostBytes_ = null;
        scMaxEachPostBytesBuilder_ = null;
      }
      if (scMinPostsIntervalMsBuilder_ == null) {
        scMinPostsIntervalMs_ = null;
      } else {
        scMinPostsIntervalMs_ = null;
        scMinPostsIntervalMsBuilder_ = null;
      }
      noSSEHeader_ = false;

      if (xPaddingBytesBuilder_ == null) {
        xPaddingBytes_ = null;
      } else {
        xPaddingBytes_ = null;
        xPaddingBytesBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.xray.transport.internet.splithttp.ConfigOuterClass.internal_static_xray_transport_internet_splithttp_Config_descriptor;
    }

    @java.lang.Override
    public com.xray.transport.internet.splithttp.Config getDefaultInstanceForType() {
      return com.xray.transport.internet.splithttp.Config.getDefaultInstance();
    }

    @java.lang.Override
    public com.xray.transport.internet.splithttp.Config build() {
      com.xray.transport.internet.splithttp.Config result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.xray.transport.internet.splithttp.Config buildPartial() {
      com.xray.transport.internet.splithttp.Config result = new com.xray.transport.internet.splithttp.Config(this);
      int from_bitField0_ = bitField0_;
      result.host_ = host_;
      result.path_ = path_;
      result.header_ = internalGetHeader();
      result.header_.makeImmutable();
      if (scMaxConcurrentPostsBuilder_ == null) {
        result.scMaxConcurrentPosts_ = scMaxConcurrentPosts_;
      } else {
        result.scMaxConcurrentPosts_ = scMaxConcurrentPostsBuilder_.build();
      }
      if (scMaxEachPostBytesBuilder_ == null) {
        result.scMaxEachPostBytes_ = scMaxEachPostBytes_;
      } else {
        result.scMaxEachPostBytes_ = scMaxEachPostBytesBuilder_.build();
      }
      if (scMinPostsIntervalMsBuilder_ == null) {
        result.scMinPostsIntervalMs_ = scMinPostsIntervalMs_;
      } else {
        result.scMinPostsIntervalMs_ = scMinPostsIntervalMsBuilder_.build();
      }
      result.noSSEHeader_ = noSSEHeader_;
      if (xPaddingBytesBuilder_ == null) {
        result.xPaddingBytes_ = xPaddingBytes_;
      } else {
        result.xPaddingBytes_ = xPaddingBytesBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.xray.transport.internet.splithttp.Config) {
        return mergeFrom((com.xray.transport.internet.splithttp.Config)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.xray.transport.internet.splithttp.Config other) {
      if (other == com.xray.transport.internet.splithttp.Config.getDefaultInstance()) return this;
      if (!other.getHost().isEmpty()) {
        host_ = other.host_;
        onChanged();
      }
      if (!other.getPath().isEmpty()) {
        path_ = other.path_;
        onChanged();
      }
      internalGetMutableHeader().mergeFrom(
          other.internalGetHeader());
      if (other.hasScMaxConcurrentPosts()) {
        mergeScMaxConcurrentPosts(other.getScMaxConcurrentPosts());
      }
      if (other.hasScMaxEachPostBytes()) {
        mergeScMaxEachPostBytes(other.getScMaxEachPostBytes());
      }
      if (other.hasScMinPostsIntervalMs()) {
        mergeScMinPostsIntervalMs(other.getScMinPostsIntervalMs());
      }
      if (other.getNoSSEHeader() != false) {
        setNoSSEHeader(other.getNoSSEHeader());
      }
      if (other.hasXPaddingBytes()) {
        mergeXPaddingBytes(other.getXPaddingBytes());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.xray.transport.internet.splithttp.Config parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.xray.transport.internet.splithttp.Config) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.lang.Object host_ = "";
    /**
     * <code>string host = 1;</code>
     * @return The host.
     */
    public java.lang.String getHost() {
      java.lang.Object ref = host_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        host_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <code>string host = 1;</code>
     * @return The bytes for host.
     */
    public com.google.protobuf.ByteString
        getHostBytes() {
      java.lang.Object ref = host_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        host_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>string host = 1;</code>
     * @param value The host to set.
     * @return This builder for chaining.
     */
    public Builder setHost(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      host_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>string host = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearHost() {
      
      host_ = getDefaultInstance().getHost();
      onChanged();
      return this;
    }
    /**
     * <code>string host = 1;</code>
     * @param value The bytes for host to set.
     * @return This builder for chaining.
     */
    public Builder setHostBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      host_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object path_ = "";
    /**
     * <code>string path = 2;</code>
     * @return The path.
     */
    public java.lang.String getPath() {
      java.lang.Object ref = path_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        path_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <code>string path = 2;</code>
     * @return The bytes for path.
     */
    public com.google.protobuf.ByteString
        getPathBytes() {
      java.lang.Object ref = path_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        path_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>string path = 2;</code>
     * @param value The path to set.
     * @return This builder for chaining.
     */
    public Builder setPath(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      path_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>string path = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearPath() {
      
      path_ = getDefaultInstance().getPath();
      onChanged();
      return this;
    }
    /**
     * <code>string path = 2;</code>
     * @param value The bytes for path to set.
     * @return This builder for chaining.
     */
    public Builder setPathBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      path_ = value;
      onChanged();
      return this;
    }

    private com.google.protobuf.MapField<
        java.lang.String, java.lang.String> header_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
    internalGetHeader() {
      if (header_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            HeaderDefaultEntryHolder.defaultEntry);
      }
      return header_;
    }
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
    internalGetMutableHeader() {
      onChanged();;
      if (header_ == null) {
        header_ = com.google.protobuf.MapField.newMapField(
            HeaderDefaultEntryHolder.defaultEntry);
      }
      if (!header_.isMutable()) {
        header_ = header_.copy();
      }
      return header_;
    }

    public int getHeaderCount() {
      return internalGetHeader().getMap().size();
    }
    /**
     * <code>map&lt;string, string&gt; header = 3;</code>
     */

    @java.lang.Override
    public boolean containsHeader(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetHeader().getMap().containsKey(key);
    }
    /**
     * Use {@link #getHeaderMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getHeader() {
      return getHeaderMap();
    }
    /**
     * <code>map&lt;string, string&gt; header = 3;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, java.lang.String> getHeaderMap() {
      return internalGetHeader().getMap();
    }
    /**
     * <code>map&lt;string, string&gt; header = 3;</code>
     */
    @java.lang.Override

    public java.lang.String getHeaderOrDefault(
        java.lang.String key,
        java.lang.String defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetHeader().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, string&gt; header = 3;</code>
     */
    @java.lang.Override

    public java.lang.String getHeaderOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetHeader().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public Builder clearHeader() {
      internalGetMutableHeader().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <code>map&lt;string, string&gt; header = 3;</code>
     */

    public Builder removeHeader(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      internalGetMutableHeader().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String>
    getMutableHeader() {
      return internalGetMutableHeader().getMutableMap();
    }
    /**
     * <code>map&lt;string, string&gt; header = 3;</code>
     */
    public Builder putHeader(
        java.lang.String key,
        java.lang.String value) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      if (value == null) { throw new java.lang.NullPointerException(); }
      internalGetMutableHeader().getMutableMap()
          .put(key, value);
      return this;
    }
    /**
     * <code>map&lt;string, string&gt; header = 3;</code>
     */

    public Builder putAllHeader(
        java.util.Map<java.lang.String, java.lang.String> values) {
      internalGetMutableHeader().getMutableMap()
          .putAll(values);
      return this;
    }

    private com.xray.transport.internet.splithttp.RandRangeConfig scMaxConcurrentPosts_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.xray.transport.internet.splithttp.RandRangeConfig, com.xray.transport.internet.splithttp.RandRangeConfig.Builder, com.xray.transport.internet.splithttp.RandRangeConfigOrBuilder> scMaxConcurrentPostsBuilder_;
    /**
     * <code>.xray.transport.internet.splithttp.RandRangeConfig scMaxConcurrentPosts = 4;</code>
     * @return Whether the scMaxConcurrentPosts field is set.
     */
    public boolean hasScMaxConcurrentPosts() {
      return scMaxConcurrentPostsBuilder_ != null || scMaxConcurrentPosts_ != null;
    }
    /**
     * <code>.xray.transport.internet.splithttp.RandRangeConfig scMaxConcurrentPosts = 4;</code>
     * @return The scMaxConcurrentPosts.
     */
    public com.xray.transport.internet.splithttp.RandRangeConfig getScMaxConcurrentPosts() {
      if (scMaxConcurrentPostsBuilder_ == null) {
        return scMaxConcurrentPosts_ == null ? com.xray.transport.internet.splithttp.RandRangeConfig.getDefaultInstance() : scMaxConcurrentPosts_;
      } else {
        return scMaxConcurrentPostsBuilder_.getMessage();
      }
    }
    /**
     * <code>.xray.transport.internet.splithttp.RandRangeConfig scMaxConcurrentPosts = 4;</code>
     */
    public Builder setScMaxConcurrentPosts(com.xray.transport.internet.splithttp.RandRangeConfig value) {
      if (scMaxConcurrentPostsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        scMaxConcurrentPosts_ = value;
        onChanged();
      } else {
        scMaxConcurrentPostsBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <code>.xray.transport.internet.splithttp.RandRangeConfig scMaxConcurrentPosts = 4;</code>
     */
    public Builder setScMaxConcurrentPosts(
        com.xray.transport.internet.splithttp.RandRangeConfig.Builder builderForValue) {
      if (scMaxConcurrentPostsBuilder_ == null) {
        scMaxConcurrentPosts_ = builderForValue.build();
        onChanged();
      } else {
        scMaxConcurrentPostsBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <code>.xray.transport.internet.splithttp.RandRangeConfig scMaxConcurrentPosts = 4;</code>
     */
    public Builder mergeScMaxConcurrentPosts(com.xray.transport.internet.splithttp.RandRangeConfig value) {
      if (scMaxConcurrentPostsBuilder_ == null) {
        if (scMaxConcurrentPosts_ != null) {
          scMaxConcurrentPosts_ =
            com.xray.transport.internet.splithttp.RandRangeConfig.newBuilder(scMaxConcurrentPosts_).mergeFrom(value).buildPartial();
        } else {
          scMaxConcurrentPosts_ = value;
        }
        onChanged();
      } else {
        scMaxConcurrentPostsBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <code>.xray.transport.internet.splithttp.RandRangeConfig scMaxConcurrentPosts = 4;</code>
     */
    public Builder clearScMaxConcurrentPosts() {
      if (scMaxConcurrentPostsBuilder_ == null) {
        scMaxConcurrentPosts_ = null;
        onChanged();
      } else {
        scMaxConcurrentPosts_ = null;
        scMaxConcurrentPostsBuilder_ = null;
      }

      return this;
    }
    /**
     * <code>.xray.transport.internet.splithttp.RandRangeConfig scMaxConcurrentPosts = 4;</code>
     */
    public com.xray.transport.internet.splithttp.RandRangeConfig.Builder getScMaxConcurrentPostsBuilder() {
      
      onChanged();
      return getScMaxConcurrentPostsFieldBuilder().getBuilder();
    }
    /**
     * <code>.xray.transport.internet.splithttp.RandRangeConfig scMaxConcurrentPosts = 4;</code>
     */
    public com.xray.transport.internet.splithttp.RandRangeConfigOrBuilder getScMaxConcurrentPostsOrBuilder() {
      if (scMaxConcurrentPostsBuilder_ != null) {
        return scMaxConcurrentPostsBuilder_.getMessageOrBuilder();
      } else {
        return scMaxConcurrentPosts_ == null ?
            com.xray.transport.internet.splithttp.RandRangeConfig.getDefaultInstance() : scMaxConcurrentPosts_;
      }
    }
    /**
     * <code>.xray.transport.internet.splithttp.RandRangeConfig scMaxConcurrentPosts = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.xray.transport.internet.splithttp.RandRangeConfig, com.xray.transport.internet.splithttp.RandRangeConfig.Builder, com.xray.transport.internet.splithttp.RandRangeConfigOrBuilder> 
        getScMaxConcurrentPostsFieldBuilder() {
      if (scMaxConcurrentPostsBuilder_ == null) {
        scMaxConcurrentPostsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.xray.transport.internet.splithttp.RandRangeConfig, com.xray.transport.internet.splithttp.RandRangeConfig.Builder, com.xray.transport.internet.splithttp.RandRangeConfigOrBuilder>(
                getScMaxConcurrentPosts(),
                getParentForChildren(),
                isClean());
        scMaxConcurrentPosts_ = null;
      }
      return scMaxConcurrentPostsBuilder_;
    }

    private com.xray.transport.internet.splithttp.RandRangeConfig scMaxEachPostBytes_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.xray.transport.internet.splithttp.RandRangeConfig, com.xray.transport.internet.splithttp.RandRangeConfig.Builder, com.xray.transport.internet.splithttp.RandRangeConfigOrBuilder> scMaxEachPostBytesBuilder_;
    /**
     * <code>.xray.transport.internet.splithttp.RandRangeConfig scMaxEachPostBytes = 5;</code>
     * @return Whether the scMaxEachPostBytes field is set.
     */
    public boolean hasScMaxEachPostBytes() {
      return scMaxEachPostBytesBuilder_ != null || scMaxEachPostBytes_ != null;
    }
    /**
     * <code>.xray.transport.internet.splithttp.RandRangeConfig scMaxEachPostBytes = 5;</code>
     * @return The scMaxEachPostBytes.
     */
    public com.xray.transport.internet.splithttp.RandRangeConfig getScMaxEachPostBytes() {
      if (scMaxEachPostBytesBuilder_ == null) {
        return scMaxEachPostBytes_ == null ? com.xray.transport.internet.splithttp.RandRangeConfig.getDefaultInstance() : scMaxEachPostBytes_;
      } else {
        return scMaxEachPostBytesBuilder_.getMessage();
      }
    }
    /**
     * <code>.xray.transport.internet.splithttp.RandRangeConfig scMaxEachPostBytes = 5;</code>
     */
    public Builder setScMaxEachPostBytes(com.xray.transport.internet.splithttp.RandRangeConfig value) {
      if (scMaxEachPostBytesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        scMaxEachPostBytes_ = value;
        onChanged();
      } else {
        scMaxEachPostBytesBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <code>.xray.transport.internet.splithttp.RandRangeConfig scMaxEachPostBytes = 5;</code>
     */
    public Builder setScMaxEachPostBytes(
        com.xray.transport.internet.splithttp.RandRangeConfig.Builder builderForValue) {
      if (scMaxEachPostBytesBuilder_ == null) {
        scMaxEachPostBytes_ = builderForValue.build();
        onChanged();
      } else {
        scMaxEachPostBytesBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <code>.xray.transport.internet.splithttp.RandRangeConfig scMaxEachPostBytes = 5;</code>
     */
    public Builder mergeScMaxEachPostBytes(com.xray.transport.internet.splithttp.RandRangeConfig value) {
      if (scMaxEachPostBytesBuilder_ == null) {
        if (scMaxEachPostBytes_ != null) {
          scMaxEachPostBytes_ =
            com.xray.transport.internet.splithttp.RandRangeConfig.newBuilder(scMaxEachPostBytes_).mergeFrom(value).buildPartial();
        } else {
          scMaxEachPostBytes_ = value;
        }
        onChanged();
      } else {
        scMaxEachPostBytesBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <code>.xray.transport.internet.splithttp.RandRangeConfig scMaxEachPostBytes = 5;</code>
     */
    public Builder clearScMaxEachPostBytes() {
      if (scMaxEachPostBytesBuilder_ == null) {
        scMaxEachPostBytes_ = null;
        onChanged();
      } else {
        scMaxEachPostBytes_ = null;
        scMaxEachPostBytesBuilder_ = null;
      }

      return this;
    }
    /**
     * <code>.xray.transport.internet.splithttp.RandRangeConfig scMaxEachPostBytes = 5;</code>
     */
    public com.xray.transport.internet.splithttp.RandRangeConfig.Builder getScMaxEachPostBytesBuilder() {
      
      onChanged();
      return getScMaxEachPostBytesFieldBuilder().getBuilder();
    }
    /**
     * <code>.xray.transport.internet.splithttp.RandRangeConfig scMaxEachPostBytes = 5;</code>
     */
    public com.xray.transport.internet.splithttp.RandRangeConfigOrBuilder getScMaxEachPostBytesOrBuilder() {
      if (scMaxEachPostBytesBuilder_ != null) {
        return scMaxEachPostBytesBuilder_.getMessageOrBuilder();
      } else {
        return scMaxEachPostBytes_ == null ?
            com.xray.transport.internet.splithttp.RandRangeConfig.getDefaultInstance() : scMaxEachPostBytes_;
      }
    }
    /**
     * <code>.xray.transport.internet.splithttp.RandRangeConfig scMaxEachPostBytes = 5;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.xray.transport.internet.splithttp.RandRangeConfig, com.xray.transport.internet.splithttp.RandRangeConfig.Builder, com.xray.transport.internet.splithttp.RandRangeConfigOrBuilder> 
        getScMaxEachPostBytesFieldBuilder() {
      if (scMaxEachPostBytesBuilder_ == null) {
        scMaxEachPostBytesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.xray.transport.internet.splithttp.RandRangeConfig, com.xray.transport.internet.splithttp.RandRangeConfig.Builder, com.xray.transport.internet.splithttp.RandRangeConfigOrBuilder>(
                getScMaxEachPostBytes(),
                getParentForChildren(),
                isClean());
        scMaxEachPostBytes_ = null;
      }
      return scMaxEachPostBytesBuilder_;
    }

    private com.xray.transport.internet.splithttp.RandRangeConfig scMinPostsIntervalMs_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.xray.transport.internet.splithttp.RandRangeConfig, com.xray.transport.internet.splithttp.RandRangeConfig.Builder, com.xray.transport.internet.splithttp.RandRangeConfigOrBuilder> scMinPostsIntervalMsBuilder_;
    /**
     * <code>.xray.transport.internet.splithttp.RandRangeConfig scMinPostsIntervalMs = 6;</code>
     * @return Whether the scMinPostsIntervalMs field is set.
     */
    public boolean hasScMinPostsIntervalMs() {
      return scMinPostsIntervalMsBuilder_ != null || scMinPostsIntervalMs_ != null;
    }
    /**
     * <code>.xray.transport.internet.splithttp.RandRangeConfig scMinPostsIntervalMs = 6;</code>
     * @return The scMinPostsIntervalMs.
     */
    public com.xray.transport.internet.splithttp.RandRangeConfig getScMinPostsIntervalMs() {
      if (scMinPostsIntervalMsBuilder_ == null) {
        return scMinPostsIntervalMs_ == null ? com.xray.transport.internet.splithttp.RandRangeConfig.getDefaultInstance() : scMinPostsIntervalMs_;
      } else {
        return scMinPostsIntervalMsBuilder_.getMessage();
      }
    }
    /**
     * <code>.xray.transport.internet.splithttp.RandRangeConfig scMinPostsIntervalMs = 6;</code>
     */
    public Builder setScMinPostsIntervalMs(com.xray.transport.internet.splithttp.RandRangeConfig value) {
      if (scMinPostsIntervalMsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        scMinPostsIntervalMs_ = value;
        onChanged();
      } else {
        scMinPostsIntervalMsBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <code>.xray.transport.internet.splithttp.RandRangeConfig scMinPostsIntervalMs = 6;</code>
     */
    public Builder setScMinPostsIntervalMs(
        com.xray.transport.internet.splithttp.RandRangeConfig.Builder builderForValue) {
      if (scMinPostsIntervalMsBuilder_ == null) {
        scMinPostsIntervalMs_ = builderForValue.build();
        onChanged();
      } else {
        scMinPostsIntervalMsBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <code>.xray.transport.internet.splithttp.RandRangeConfig scMinPostsIntervalMs = 6;</code>
     */
    public Builder mergeScMinPostsIntervalMs(com.xray.transport.internet.splithttp.RandRangeConfig value) {
      if (scMinPostsIntervalMsBuilder_ == null) {
        if (scMinPostsIntervalMs_ != null) {
          scMinPostsIntervalMs_ =
            com.xray.transport.internet.splithttp.RandRangeConfig.newBuilder(scMinPostsIntervalMs_).mergeFrom(value).buildPartial();
        } else {
          scMinPostsIntervalMs_ = value;
        }
        onChanged();
      } else {
        scMinPostsIntervalMsBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <code>.xray.transport.internet.splithttp.RandRangeConfig scMinPostsIntervalMs = 6;</code>
     */
    public Builder clearScMinPostsIntervalMs() {
      if (scMinPostsIntervalMsBuilder_ == null) {
        scMinPostsIntervalMs_ = null;
        onChanged();
      } else {
        scMinPostsIntervalMs_ = null;
        scMinPostsIntervalMsBuilder_ = null;
      }

      return this;
    }
    /**
     * <code>.xray.transport.internet.splithttp.RandRangeConfig scMinPostsIntervalMs = 6;</code>
     */
    public com.xray.transport.internet.splithttp.RandRangeConfig.Builder getScMinPostsIntervalMsBuilder() {
      
      onChanged();
      return getScMinPostsIntervalMsFieldBuilder().getBuilder();
    }
    /**
     * <code>.xray.transport.internet.splithttp.RandRangeConfig scMinPostsIntervalMs = 6;</code>
     */
    public com.xray.transport.internet.splithttp.RandRangeConfigOrBuilder getScMinPostsIntervalMsOrBuilder() {
      if (scMinPostsIntervalMsBuilder_ != null) {
        return scMinPostsIntervalMsBuilder_.getMessageOrBuilder();
      } else {
        return scMinPostsIntervalMs_ == null ?
            com.xray.transport.internet.splithttp.RandRangeConfig.getDefaultInstance() : scMinPostsIntervalMs_;
      }
    }
    /**
     * <code>.xray.transport.internet.splithttp.RandRangeConfig scMinPostsIntervalMs = 6;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.xray.transport.internet.splithttp.RandRangeConfig, com.xray.transport.internet.splithttp.RandRangeConfig.Builder, com.xray.transport.internet.splithttp.RandRangeConfigOrBuilder> 
        getScMinPostsIntervalMsFieldBuilder() {
      if (scMinPostsIntervalMsBuilder_ == null) {
        scMinPostsIntervalMsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.xray.transport.internet.splithttp.RandRangeConfig, com.xray.transport.internet.splithttp.RandRangeConfig.Builder, com.xray.transport.internet.splithttp.RandRangeConfigOrBuilder>(
                getScMinPostsIntervalMs(),
                getParentForChildren(),
                isClean());
        scMinPostsIntervalMs_ = null;
      }
      return scMinPostsIntervalMsBuilder_;
    }

    private boolean noSSEHeader_ ;
    /**
     * <code>bool noSSEHeader = 7;</code>
     * @return The noSSEHeader.
     */
    @java.lang.Override
    public boolean getNoSSEHeader() {
      return noSSEHeader_;
    }
    /**
     * <code>bool noSSEHeader = 7;</code>
     * @param value The noSSEHeader to set.
     * @return This builder for chaining.
     */
    public Builder setNoSSEHeader(boolean value) {
      
      noSSEHeader_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>bool noSSEHeader = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearNoSSEHeader() {
      
      noSSEHeader_ = false;
      onChanged();
      return this;
    }

    private com.xray.transport.internet.splithttp.RandRangeConfig xPaddingBytes_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.xray.transport.internet.splithttp.RandRangeConfig, com.xray.transport.internet.splithttp.RandRangeConfig.Builder, com.xray.transport.internet.splithttp.RandRangeConfigOrBuilder> xPaddingBytesBuilder_;
    /**
     * <code>.xray.transport.internet.splithttp.RandRangeConfig xPaddingBytes = 8;</code>
     * @return Whether the xPaddingBytes field is set.
     */
    public boolean hasXPaddingBytes() {
      return xPaddingBytesBuilder_ != null || xPaddingBytes_ != null;
    }
    /**
     * <code>.xray.transport.internet.splithttp.RandRangeConfig xPaddingBytes = 8;</code>
     * @return The xPaddingBytes.
     */
    public com.xray.transport.internet.splithttp.RandRangeConfig getXPaddingBytes() {
      if (xPaddingBytesBuilder_ == null) {
        return xPaddingBytes_ == null ? com.xray.transport.internet.splithttp.RandRangeConfig.getDefaultInstance() : xPaddingBytes_;
      } else {
        return xPaddingBytesBuilder_.getMessage();
      }
    }
    /**
     * <code>.xray.transport.internet.splithttp.RandRangeConfig xPaddingBytes = 8;</code>
     */
    public Builder setXPaddingBytes(com.xray.transport.internet.splithttp.RandRangeConfig value) {
      if (xPaddingBytesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        xPaddingBytes_ = value;
        onChanged();
      } else {
        xPaddingBytesBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <code>.xray.transport.internet.splithttp.RandRangeConfig xPaddingBytes = 8;</code>
     */
    public Builder setXPaddingBytes(
        com.xray.transport.internet.splithttp.RandRangeConfig.Builder builderForValue) {
      if (xPaddingBytesBuilder_ == null) {
        xPaddingBytes_ = builderForValue.build();
        onChanged();
      } else {
        xPaddingBytesBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <code>.xray.transport.internet.splithttp.RandRangeConfig xPaddingBytes = 8;</code>
     */
    public Builder mergeXPaddingBytes(com.xray.transport.internet.splithttp.RandRangeConfig value) {
      if (xPaddingBytesBuilder_ == null) {
        if (xPaddingBytes_ != null) {
          xPaddingBytes_ =
            com.xray.transport.internet.splithttp.RandRangeConfig.newBuilder(xPaddingBytes_).mergeFrom(value).buildPartial();
        } else {
          xPaddingBytes_ = value;
        }
        onChanged();
      } else {
        xPaddingBytesBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <code>.xray.transport.internet.splithttp.RandRangeConfig xPaddingBytes = 8;</code>
     */
    public Builder clearXPaddingBytes() {
      if (xPaddingBytesBuilder_ == null) {
        xPaddingBytes_ = null;
        onChanged();
      } else {
        xPaddingBytes_ = null;
        xPaddingBytesBuilder_ = null;
      }

      return this;
    }
    /**
     * <code>.xray.transport.internet.splithttp.RandRangeConfig xPaddingBytes = 8;</code>
     */
    public com.xray.transport.internet.splithttp.RandRangeConfig.Builder getXPaddingBytesBuilder() {
      
      onChanged();
      return getXPaddingBytesFieldBuilder().getBuilder();
    }
    /**
     * <code>.xray.transport.internet.splithttp.RandRangeConfig xPaddingBytes = 8;</code>
     */
    public com.xray.transport.internet.splithttp.RandRangeConfigOrBuilder getXPaddingBytesOrBuilder() {
      if (xPaddingBytesBuilder_ != null) {
        return xPaddingBytesBuilder_.getMessageOrBuilder();
      } else {
        return xPaddingBytes_ == null ?
            com.xray.transport.internet.splithttp.RandRangeConfig.getDefaultInstance() : xPaddingBytes_;
      }
    }
    /**
     * <code>.xray.transport.internet.splithttp.RandRangeConfig xPaddingBytes = 8;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.xray.transport.internet.splithttp.RandRangeConfig, com.xray.transport.internet.splithttp.RandRangeConfig.Builder, com.xray.transport.internet.splithttp.RandRangeConfigOrBuilder> 
        getXPaddingBytesFieldBuilder() {
      if (xPaddingBytesBuilder_ == null) {
        xPaddingBytesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.xray.transport.internet.splithttp.RandRangeConfig, com.xray.transport.internet.splithttp.RandRangeConfig.Builder, com.xray.transport.internet.splithttp.RandRangeConfigOrBuilder>(
                getXPaddingBytes(),
                getParentForChildren(),
                isClean());
        xPaddingBytes_ = null;
      }
      return xPaddingBytesBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:xray.transport.internet.splithttp.Config)
  }

  // @@protoc_insertion_point(class_scope:xray.transport.internet.splithttp.Config)
  private static final com.xray.transport.internet.splithttp.Config DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.xray.transport.internet.splithttp.Config();
  }

  public static com.xray.transport.internet.splithttp.Config getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Config>
      PARSER = new com.google.protobuf.AbstractParser<Config>() {
    @java.lang.Override
    public Config parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new Config(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<Config> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Config> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.xray.transport.internet.splithttp.Config getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

