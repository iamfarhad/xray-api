// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: app/proxyman/config.proto

package com.xray.app.proxyman;

public final class Config {
  private Config() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_xray_app_proxyman_InboundConfig_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_xray_app_proxyman_InboundConfig_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_xray_app_proxyman_AllocationStrategy_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_xray_app_proxyman_AllocationStrategy_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_xray_app_proxyman_AllocationStrategy_AllocationStrategyConcurrency_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_xray_app_proxyman_AllocationStrategy_AllocationStrategyConcurrency_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_xray_app_proxyman_AllocationStrategy_AllocationStrategyRefresh_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_xray_app_proxyman_AllocationStrategy_AllocationStrategyRefresh_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_xray_app_proxyman_SniffingConfig_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_xray_app_proxyman_SniffingConfig_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_xray_app_proxyman_ReceiverConfig_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_xray_app_proxyman_ReceiverConfig_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_xray_app_proxyman_InboundHandlerConfig_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_xray_app_proxyman_InboundHandlerConfig_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_xray_app_proxyman_OutboundConfig_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_xray_app_proxyman_OutboundConfig_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_xray_app_proxyman_SenderConfig_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_xray_app_proxyman_SenderConfig_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_xray_app_proxyman_MultiplexingConfig_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_xray_app_proxyman_MultiplexingConfig_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\031app/proxyman/config.proto\022\021xray.app.pr" +
      "oxyman\032\030common/net/address.proto\032\025common" +
      "/net/port.proto\032\037transport/internet/conf" +
      "ig.proto\032!common/serial/typed_message.pr" +
      "oto\"\017\n\rInboundConfig\"\204\003\n\022AllocationStrat" +
      "egy\0228\n\004type\030\001 \001(\0162*.xray.app.proxyman.Al" +
      "locationStrategy.Type\022X\n\013concurrency\030\002 \001" +
      "(\0132C.xray.app.proxyman.AllocationStrateg" +
      "y.AllocationStrategyConcurrency\022P\n\007refre" +
      "sh\030\003 \001(\0132?.xray.app.proxyman.AllocationS" +
      "trategy.AllocationStrategyRefresh\032.\n\035All" +
      "ocationStrategyConcurrency\022\r\n\005value\030\001 \001(" +
      "\r\032*\n\031AllocationStrategyRefresh\022\r\n\005value\030" +
      "\001 \001(\r\",\n\004Type\022\n\n\006Always\020\000\022\n\n\006Random\020\001\022\014\n" +
      "\010External\020\002\"\204\001\n\016SniffingConfig\022\017\n\007enable" +
      "d\030\001 \001(\010\022\034\n\024destination_override\030\002 \003(\t\022\030\n" +
      "\020domains_excluded\030\003 \003(\t\022\025\n\rmetadata_only" +
      "\030\004 \001(\010\022\022\n\nroute_only\030\005 \001(\010\"\331\002\n\016ReceiverC" +
      "onfig\022,\n\tport_list\030\001 \001(\0132\031.xray.common.n" +
      "et.PortList\022+\n\006listen\030\002 \001(\0132\033.xray.commo" +
      "n.net.IPOrDomain\022B\n\023allocation_strategy\030" +
      "\003 \001(\0132%.xray.app.proxyman.AllocationStra" +
      "tegy\022>\n\017stream_settings\030\004 \001(\0132%.xray.tra" +
      "nsport.internet.StreamConfig\022$\n\034receive_" +
      "original_destination\030\005 \001(\010\022<\n\021sniffing_s" +
      "ettings\030\007 \001(\0132!.xray.app.proxyman.Sniffi" +
      "ngConfigJ\004\010\006\020\007\"\232\001\n\024InboundHandlerConfig\022" +
      "\013\n\003tag\030\001 \001(\t\022;\n\021receiver_settings\030\002 \001(\0132" +
      " .xray.common.serial.TypedMessage\0228\n\016pro" +
      "xy_settings\030\003 \001(\0132 .xray.common.serial.T" +
      "ypedMessage\"\020\n\016OutboundConfig\"\213\002\n\014Sender" +
      "Config\022(\n\003via\030\001 \001(\0132\033.xray.common.net.IP" +
      "OrDomain\022>\n\017stream_settings\030\002 \001(\0132%.xray" +
      ".transport.internet.StreamConfig\022<\n\016prox" +
      "y_settings\030\003 \001(\0132$.xray.transport.intern" +
      "et.ProxyConfig\022A\n\022multiplex_settings\030\004 \001" +
      "(\0132%.xray.app.proxyman.MultiplexingConfi" +
      "g\022\020\n\010via_cidr\030\005 \001(\t\"l\n\022MultiplexingConfi" +
      "g\022\017\n\007enabled\030\001 \001(\010\022\023\n\013concurrency\030\002 \001(\005\022" +
      "\027\n\017xudpConcurrency\030\003 \001(\005\022\027\n\017xudpProxyUDP" +
      "443\030\004 \001(\tBU\n\025com.xray.app.proxymanP\001Z&gi" +
      "thub.com/xtls/xray-core/app/proxyman\252\002\021X" +
      "ray.App.Proxymanb\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.xray.common.net.Address.getDescriptor(),
          com.xray.common.net.Port.getDescriptor(),
          com.xray.transport.internet.Config.getDescriptor(),
          com.xray.common.serial.TypedMessageOuterClass.getDescriptor(),
        });
    internal_static_xray_app_proxyman_InboundConfig_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_xray_app_proxyman_InboundConfig_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_xray_app_proxyman_InboundConfig_descriptor,
        new java.lang.String[] { });
    internal_static_xray_app_proxyman_AllocationStrategy_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_xray_app_proxyman_AllocationStrategy_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_xray_app_proxyman_AllocationStrategy_descriptor,
        new java.lang.String[] { "Type", "Concurrency", "Refresh", });
    internal_static_xray_app_proxyman_AllocationStrategy_AllocationStrategyConcurrency_descriptor =
      internal_static_xray_app_proxyman_AllocationStrategy_descriptor.getNestedTypes().get(0);
    internal_static_xray_app_proxyman_AllocationStrategy_AllocationStrategyConcurrency_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_xray_app_proxyman_AllocationStrategy_AllocationStrategyConcurrency_descriptor,
        new java.lang.String[] { "Value", });
    internal_static_xray_app_proxyman_AllocationStrategy_AllocationStrategyRefresh_descriptor =
      internal_static_xray_app_proxyman_AllocationStrategy_descriptor.getNestedTypes().get(1);
    internal_static_xray_app_proxyman_AllocationStrategy_AllocationStrategyRefresh_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_xray_app_proxyman_AllocationStrategy_AllocationStrategyRefresh_descriptor,
        new java.lang.String[] { "Value", });
    internal_static_xray_app_proxyman_SniffingConfig_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_xray_app_proxyman_SniffingConfig_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_xray_app_proxyman_SniffingConfig_descriptor,
        new java.lang.String[] { "Enabled", "DestinationOverride", "DomainsExcluded", "MetadataOnly", "RouteOnly", });
    internal_static_xray_app_proxyman_ReceiverConfig_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_xray_app_proxyman_ReceiverConfig_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_xray_app_proxyman_ReceiverConfig_descriptor,
        new java.lang.String[] { "PortList", "Listen", "AllocationStrategy", "StreamSettings", "ReceiveOriginalDestination", "SniffingSettings", });
    internal_static_xray_app_proxyman_InboundHandlerConfig_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_xray_app_proxyman_InboundHandlerConfig_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_xray_app_proxyman_InboundHandlerConfig_descriptor,
        new java.lang.String[] { "Tag", "ReceiverSettings", "ProxySettings", });
    internal_static_xray_app_proxyman_OutboundConfig_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_xray_app_proxyman_OutboundConfig_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_xray_app_proxyman_OutboundConfig_descriptor,
        new java.lang.String[] { });
    internal_static_xray_app_proxyman_SenderConfig_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_xray_app_proxyman_SenderConfig_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_xray_app_proxyman_SenderConfig_descriptor,
        new java.lang.String[] { "Via", "StreamSettings", "ProxySettings", "MultiplexSettings", "ViaCidr", });
    internal_static_xray_app_proxyman_MultiplexingConfig_descriptor =
      getDescriptor().getMessageTypes().get(7);
    internal_static_xray_app_proxyman_MultiplexingConfig_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_xray_app_proxyman_MultiplexingConfig_descriptor,
        new java.lang.String[] { "Enabled", "Concurrency", "XudpConcurrency", "XudpProxyUDP443", });
    com.xray.common.net.Address.getDescriptor();
    com.xray.common.net.Port.getDescriptor();
    com.xray.transport.internet.Config.getDescriptor();
    com.xray.common.serial.TypedMessageOuterClass.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
