// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: app/proxyman/config.proto

package com.xray.app.proxyman;

public interface ReceiverConfigOrBuilder extends
    // @@protoc_insertion_point(interface_extends:xray.app.proxyman.ReceiverConfig)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * PortList specifies the ports which the Receiver should listen on.
   * </pre>
   *
   * <code>.xray.common.net.PortList port_list = 1;</code>
   * @return Whether the portList field is set.
   */
  boolean hasPortList();
  /**
   * <pre>
   * PortList specifies the ports which the Receiver should listen on.
   * </pre>
   *
   * <code>.xray.common.net.PortList port_list = 1;</code>
   * @return The portList.
   */
  com.xray.common.net.PortList getPortList();
  /**
   * <pre>
   * PortList specifies the ports which the Receiver should listen on.
   * </pre>
   *
   * <code>.xray.common.net.PortList port_list = 1;</code>
   */
  com.xray.common.net.PortListOrBuilder getPortListOrBuilder();

  /**
   * <pre>
   * Listen specifies the IP address that the Receiver should listen on.
   * </pre>
   *
   * <code>.xray.common.net.IPOrDomain listen = 2;</code>
   * @return Whether the listen field is set.
   */
  boolean hasListen();
  /**
   * <pre>
   * Listen specifies the IP address that the Receiver should listen on.
   * </pre>
   *
   * <code>.xray.common.net.IPOrDomain listen = 2;</code>
   * @return The listen.
   */
  com.xray.common.net.IPOrDomain getListen();
  /**
   * <pre>
   * Listen specifies the IP address that the Receiver should listen on.
   * </pre>
   *
   * <code>.xray.common.net.IPOrDomain listen = 2;</code>
   */
  com.xray.common.net.IPOrDomainOrBuilder getListenOrBuilder();

  /**
   * <code>.xray.app.proxyman.AllocationStrategy allocation_strategy = 3;</code>
   * @return Whether the allocationStrategy field is set.
   */
  boolean hasAllocationStrategy();
  /**
   * <code>.xray.app.proxyman.AllocationStrategy allocation_strategy = 3;</code>
   * @return The allocationStrategy.
   */
  com.xray.app.proxyman.AllocationStrategy getAllocationStrategy();
  /**
   * <code>.xray.app.proxyman.AllocationStrategy allocation_strategy = 3;</code>
   */
  com.xray.app.proxyman.AllocationStrategyOrBuilder getAllocationStrategyOrBuilder();

  /**
   * <code>.xray.transport.internet.StreamConfig stream_settings = 4;</code>
   * @return Whether the streamSettings field is set.
   */
  boolean hasStreamSettings();
  /**
   * <code>.xray.transport.internet.StreamConfig stream_settings = 4;</code>
   * @return The streamSettings.
   */
  com.xray.transport.internet.StreamConfig getStreamSettings();
  /**
   * <code>.xray.transport.internet.StreamConfig stream_settings = 4;</code>
   */
  com.xray.transport.internet.StreamConfigOrBuilder getStreamSettingsOrBuilder();

  /**
   * <code>bool receive_original_destination = 5;</code>
   * @return The receiveOriginalDestination.
   */
  boolean getReceiveOriginalDestination();

  /**
   * <code>.xray.app.proxyman.SniffingConfig sniffing_settings = 7;</code>
   * @return Whether the sniffingSettings field is set.
   */
  boolean hasSniffingSettings();
  /**
   * <code>.xray.app.proxyman.SniffingConfig sniffing_settings = 7;</code>
   * @return The sniffingSettings.
   */
  com.xray.app.proxyman.SniffingConfig getSniffingSettings();
  /**
   * <code>.xray.app.proxyman.SniffingConfig sniffing_settings = 7;</code>
   */
  com.xray.app.proxyman.SniffingConfigOrBuilder getSniffingSettingsOrBuilder();
}
