// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: app/router/config.proto

package com.xray.app.router;

public interface StrategyLeastLoadConfigOrBuilder extends
    // @@protoc_insertion_point(interface_extends:xray.app.router.StrategyLeastLoadConfig)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * weight settings
   * </pre>
   *
   * <code>repeated .xray.app.router.StrategyWeight costs = 2;</code>
   */
  java.util.List<com.xray.app.router.StrategyWeight> 
      getCostsList();
  /**
   * <pre>
   * weight settings
   * </pre>
   *
   * <code>repeated .xray.app.router.StrategyWeight costs = 2;</code>
   */
  com.xray.app.router.StrategyWeight getCosts(int index);
  /**
   * <pre>
   * weight settings
   * </pre>
   *
   * <code>repeated .xray.app.router.StrategyWeight costs = 2;</code>
   */
  int getCostsCount();
  /**
   * <pre>
   * weight settings
   * </pre>
   *
   * <code>repeated .xray.app.router.StrategyWeight costs = 2;</code>
   */
  java.util.List<? extends com.xray.app.router.StrategyWeightOrBuilder> 
      getCostsOrBuilderList();
  /**
   * <pre>
   * weight settings
   * </pre>
   *
   * <code>repeated .xray.app.router.StrategyWeight costs = 2;</code>
   */
  com.xray.app.router.StrategyWeightOrBuilder getCostsOrBuilder(
      int index);

  /**
   * <pre>
   * RTT baselines for selecting, int64 values of time.Duration
   * </pre>
   *
   * <code>repeated int64 baselines = 3;</code>
   * @return A list containing the baselines.
   */
  java.util.List<java.lang.Long> getBaselinesList();
  /**
   * <pre>
   * RTT baselines for selecting, int64 values of time.Duration
   * </pre>
   *
   * <code>repeated int64 baselines = 3;</code>
   * @return The count of baselines.
   */
  int getBaselinesCount();
  /**
   * <pre>
   * RTT baselines for selecting, int64 values of time.Duration
   * </pre>
   *
   * <code>repeated int64 baselines = 3;</code>
   * @param index The index of the element to return.
   * @return The baselines at the given index.
   */
  long getBaselines(int index);

  /**
   * <pre>
   * expected nodes count to select
   * </pre>
   *
   * <code>int32 expected = 4;</code>
   * @return The expected.
   */
  int getExpected();

  /**
   * <pre>
   * max acceptable rtt, filter away high delay nodes. default 0
   * </pre>
   *
   * <code>int64 maxRTT = 5;</code>
   * @return The maxRTT.
   */
  long getMaxRTT();

  /**
   * <pre>
   * acceptable failure rate
   * </pre>
   *
   * <code>float tolerance = 6;</code>
   * @return The tolerance.
   */
  float getTolerance();
}
